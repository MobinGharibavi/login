import{U as y,aO as w,aC as x,aJ as h,c as b,aH as g,aM as S,z as f}from"./CbnsVwY1.js";const v=Symbol.for("nuxt:client-only"),_=y({name:"ClientOnly",inheritAttrs:!1,props:["fallback","placeholder","placeholderTag","fallbackTag"],setup(r,{slots:e,attrs:t}){const u=w(!1);return x(()=>{u.value=!0}),h(v,!0),a=>{var n;if(u.value)return(n=e.default)==null?void 0:n.call(e);const c=e.fallback||e.placeholder;if(c)return c();const o=a.fallback||a.placeholder||"",l=a.fallbackTag||a.placeholderTag||"span";return b(l,t,o)}}});function O(){return typeof window<"u"}function j(r){return O()&&r in window}function d({"min-width":r,min:e=r,max:t,raw:u}={}){return{min:e,max:t,raw:u}}function p(r,e=!0){return Array.isArray(r)?r.map(t=>{if(e&&Array.isArray(t))throw new Error("The tuple syntax is not supported for `screens`.");if(typeof t=="string")return{name:t.toString(),values:[{min:t,max:void 0}]};let[u,a]=t;return u=u.toString(),typeof a=="string"?{name:u,values:[{min:a,max:void 0}]}:Array.isArray(a)?{name:u,values:a.map(c=>d(c))}:{name:u,values:[d(a)]}}):p(Object.entries(r??{}),!1)}function k(r){return r.map(e=>e.raw!==void 0?e.raw:[e.min&&`(min-width: ${e.min})`,e.max&&`(max-width: ${e.max})`].filter(Boolean).join(" and ")).join(", ")}var A={xs:"0px",sm:"640px",md:"768px",lg:"1024px",xl:"1280px"};const E="$screens";function M(r){const e=S({screens:p(r||A),queries:{},matches:{},hasSetup:!1});function t(){Object.entries(e.queries).forEach(([n,i])=>{e.matches[n]=i.matches})}function u(n){return f(()=>Object.keys(e.matches).filter(i=>e.matches[i]===!0&&n.hasOwnProperty(i)).map(i=>n[i]))}const a=f(()=>Object.keys(e.matches).filter(n=>e.matches[n]));function c(n,i){return f(()=>{const s=o.value;return s&&n.hasOwnProperty(s)?n[s]:i})}const o=f(()=>{const n=a.value;return n.length?n[n.length-1]:""});function l(){Object.values(e.queries).forEach(n=>n.removeEventListener("change",t)),e.queries={},e.matches={}}return!e.hasSetup&&j("matchMedia")&&(l(),e.queries=e.screens.reduce((n,{name:i,values:s})=>{const m=window.matchMedia(k(s));return m.addEventListener("change",t),n[i]=m,n},{}),t(),e.hasSetup=!0),{matches:e.matches,list:a,mapList:u,current:o,mapCurrent:c,cleanup:l}}function q(r,e){const t=M(r);return h((e==null?void 0:e.injectKey)||E,t),g(()=>t.cleanup()),t}export{_,q as u};

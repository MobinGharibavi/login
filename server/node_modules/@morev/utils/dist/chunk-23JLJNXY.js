import {
  mergeObjects
} from "./chunk-SYYF6SU6.js";
import {
  isNullish
} from "./chunk-XDUT4IRC.js";
import {
  isEmpty
} from "./chunk-76QAEAB7.js";
import {
  isDate
} from "./chunk-4GTX7FBA.js";

// src/cookies/serialize-cookie/serialize-cookie.ts
var DEFAULT_OPTIONS = {
  encodeValue: true
};
var serializeCookie = (cookie, userOptions) => {
  const options = mergeObjects(DEFAULT_OPTIONS, userOptions);
  const value = options.encodeValue ? encodeURIComponent(cookie.value) : cookie.value;
  let cookieString = cookie.name ? `${cookie.name}=${value}` : value;
  if ("maxAge" in cookie && !isNullish(cookie.maxAge)) {
    const maybeMaxAge = parseInt(`${cookie.maxAge}`, 10);
    if (!Number.isNaN(maybeMaxAge) && Number.isFinite(maybeMaxAge)) {
      cookieString += `; Max-Age=${maybeMaxAge}`;
    }
  }
  if ("domain" in cookie && !isEmpty(cookie.domain)) {
    cookieString += `; Domain=${cookie.domain}`;
  }
  if ("path" in cookie && !isEmpty(cookie.path)) {
    cookieString += `; Path=${cookie.path}`;
  }
  if ("expires" in cookie && isDate(cookie.expires, true)) {
    cookieString += `; Expires=${cookie.expires.toUTCString()}`;
  }
  if (cookie.httpOnly) {
    cookieString += "; HttpOnly";
  }
  if (cookie.secure) {
    cookieString += "; Secure";
  }
  if (cookie.partitioned) {
    cookieString += "; Partitioned";
  }
  if (cookie.sameSite) {
    if (cookie.sameSite === "Strict" || cookie.sameSite === "Lax" || cookie.sameSite === "None") {
      cookieString += `; SameSite=${cookie.sameSite}`;
    }
  }
  if (cookie.priority) {
    if (cookie.priority === "Low" || cookie.priority === "Medium" || cookie.priority === "High") {
      cookieString += `; Priority=${cookie.priority}`;
    }
  }
  return cookieString;
};

export {
  serializeCookie
};
